@inject HttpClient HttpClient

<div class="content" id="content">
    <div class="content-margins">
        <div class="text" style="height:25vh"> </div>

        <h1 class="heading">About Me</h1>
        <div class="text" style="height:50vh">it's all empty here...</div>

        <hr class="separator" />

        <h1 class="heading">Previous Projects</h1>
        <div class="text" style="height:50vh">it's all empty here...</div>

        <hr class="separator" />

        <h1 class="heading">Past Experience</h1>
        
        <div class="text" style="height:50vh">it's all empty here...</div>

        <hr class="separator" />

        <h1 class="heading">Games</h1>
        <div class="text" style="height:50vh">it's all empty here...</div>
        
        <hr class="separator"/>

        <h1 class="heading">Posts</h1>
        <ClickablePanelViewList Panels="@(Panels)"/>

        <div class="text" style="height:25vh"> </div>

        <Footer/>
    </div>
</div>

@* make room for sticky element, but only enough such that it stops at 100vh (height of page cover). *@
<div style="height:100vh"></div>

<style>
    .content-margins {
        margin-left: 12%;
        margin-right: 10%;
        margin-top: 0;
        margin-bottom: 0;
    }

    .content {
        position: sticky;
        top: 0vh;
        width: 100%;
    }

    .heading {
        font-family: 'Roboto Mono', monospace;
        font-size: 4em;
        margin: 0px;
    }

    .subheading {
        font-family: 'Roboto Mono', monospace;
        font-size: 3em;
        margin: 0px;
    }


    .separator {
    }
</style>

@code {
    PostPanelProvider postPanelProvider;
    private IEnumerable<ClickablePanel> panels;

    public IEnumerable<ClickablePanel> Panels => panels ?? Enumerable.Empty<ClickablePanel>();

    protected override Task OnInitializedAsync()
    {
        postPanelProvider = new(HttpClient);
        postPanelProvider.GetPanels().ContinueWith(m => {
            panels = m.Result;
            StateHasChanged();
        });

        return base.OnInitializedAsync();
    }
}